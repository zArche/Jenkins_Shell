#!/bin/bash

echo "android build"

build_path="/var/www/htdocs/jenkins/build/android" #web server本地地址
env_path="/home/arche/workspace/jenkins/env"  #存放打包所需配置文件，如签名文件
web_path="http://192.168.2.128/jenkins/build/android" #web server服务器地址

#为了避免jenkins环境奇奇怪怪的环境变量问题，所以用全路径的方式
shell_path="/home/arche/workspace/jenkins/shell"

function func_log_print(){
        local level="$1"
        local msg="$2"

        case $level in
                error)  echo -e "${msg} ";;
                warn)   echo -e "${msg} ";;
                info)   echo -e "${msg} ";;
                concern)        echo -e "${msg} ";;
                *)              echo "${msg}";;
        esac
}

function func_android_build(){
        local local_path=$1
        local target_sdk=$2
	local libs=$3
        local build_num=${BUILD_NUMBER}
        local projectName=${JOB_NAME}
        local keystore_file_path="$env_path/release.jks"
        local debug_keystore_file_path="$env_path/debug.keystore"
        local build_folder=""
        local build_save_path=""
        local apk_name=""

        local build_type=${BUILD_TYPE}

	local commit_id=""
	local version_name=""
	
        echo "###############BUILD_TYPE############"
        echo "${BUILD_TYPE}"


        #libray 
        func_log_print "info" "[+] `date +'%H:%M:%S'` info(@$LINENO): 进行第一步：编译构建"
	if [ -e $local_path/${JOB_NAME} ];then
             $shell_path/build_libs $local_path/${JOB_NAME} 1 "$libs"
        else
             $shell_path/build_libs $local_path 1 "$libs"
        fi
	if [ $? -eq 0 ];then

	        ###  编译apk工程 start   ###
        	if [ -e $local_path/${JOB_NAME} ];then
                	cd $local_path/${JOB_NAME}
       		else
                	cd $local_path
        	fi

	       /home/jenkins/DevTools/adt/sdk/tools/android update project --name ${JOB_NAME} --target ${target_sdk} --path .
        	###  编译apk工程 end   ###
	
		version_name=`cat AndroidManifest.xml | grep android:versionName | awk -F'"' '{print $2}'`

        	#ant build
	        func_log_print "info" "[+] `date +'%H:%M:%S'` info(@$LINENO): 进行第二步：打包构建"
		sed -i "s/\\\\/\//g" project.properties
        	ant clean
	        if [[ "${BUILD_TYPE}" == "release" ]];then

        	        cp $env_path/ant.properties $env_path/st_facesign.jks .
                	ant release
	        else
        	        ant debug
	        fi
		if [ $? -eq 0 ];then
	        	#apk file save
		        func_log_print "info" "[+] `date +'%H:%M:%S'` info(@$LINENO): 进行第三步：打包分发"
        		build_apk_save_path=$build_path/$projectName/$build_type
			mkdir -p $build_apk_save_path

        		cp  bin/*.apk $build_apk_save_path
	        	if [[ "${BUILD_TYPE}" == "debug" ]];then
        	        	mv $build_apk_save_path/${projectName}-debug.apk  $build_apk_save_path/${projectName}_debug_v${version_name}_${build_num}.apk
	                	mv $build_apk_save_path/${projectName}-debug-unaligned.apk  $build_apk_save_path/${projectName}_debug_v${version_name}_${build_num}_unaligned.apk
		        elif [[ "${BUILD_TYPE}" == "release" ]];then

        		        cp -r bin/proguard $build_apk_save_path/proguard_v${version_name}_${build_num}

                		mv $build_apk_save_path/${projectName}-release.apk  $build_apk_save_path/${projectName}_release_v${version_name}_${build_num}.apk
		                mv $build_apk_save_path/${projectName}-release-unaligned.apk  $build_apk_save_path/${projectName}_release_v${version_name}_${build_num}_unaligned.apk
        		        mv $build_apk_save_path/${projectName}-release-unsigned.apk  $build_apk_save_path/${projectName}_release_v${version_name}_${build_num}_unsigned.apk
	        	else
        	        	func_log_print "error" "[-] `date +'%H:%M:%S'` error($info_pattern@$LINENO): 执行android update lib-project -p . --target ${target_sdk} 错误"
	                	func_exit 1
		        fi
        		download_url="$web_path/$projectName/$build_type/${projectName}_${BUILD_TYPE}_v${version_name}_${build_num}.apk"
		else
			$shell_path/email "failed"
		fi


	fi
        #生成通知邮件内容
        png_path="$build_path/$projectName/$build_type"
        mkdir -p $png_path
        png_path="$png_path/${projectName}_${BUILD_TYPE}_v${version_name}_${build_num}.png"
        qrencode -o $png_path $download_url
        if [  -e "${png_path}" ]; then
                func_log_print "info" "[+] `date +'%H:%M:%S'` info($info_pattern@$LINENO): 二维码生成成功!"
        else
                func_log_print "error" "[-] `date +'%H:%M:%S'` error($info_pattern@$LINENO): 二维码生成失败!"
		$shell_path/email "failed"
		exit 1
        fi

	cd $local_path
	commit_id=`git log | grep commit | awk {'if(NR==1) print $2;'}`
        $shell_path/email "jenkins" $version_name $build_num $download_url ${download_url/apk/png} $commit_id 

        func_log_print "concern" "####################################"
        func_log_print "concern"
        func_log_print "concern" "android自动打包成功，下载链接为："
        func_log_print "concern"  "${download_url}"
        func_log_print "concern"
	func_log_print "concern" "二维码地址为："
	func_log_print "concern"  ${download_url/apk/png}
	func_log_print "concern"
        func_log_print "concern" "####################################"
	func_log_print "concern"

        exit 0
}



##############################################################################
#主程序
############################################################################## 
func_android_build $1 $ANDROID_SDK "$2"


